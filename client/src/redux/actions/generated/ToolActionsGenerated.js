/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN ToolActionsGenerated.js PLEASE EDIT ../ToolActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import ToolApi from "../../../api/ToolApi";

let actionsFunction = {

  //CRUD METHODS

  // Create tool
  createTool: function(tool) {
    return function(dispatch) {
      return ToolApi
        .createTool(tool)
        .then(tool => {
          dispatch(actionsFunction.createToolSuccess(tool));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createToolSuccess: function(tool) {
    return { type: types.CREATE_TOOL_SUCCESS, payload: tool };
  },


  // Delete tool
  deleteTool: function(id) {
    return function(dispatch) {
      return ToolApi
        .deleteTool(id)
        .then(tool => {
          dispatch(actionsFunction.deleteToolSuccess(tool));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteToolSuccess: function(tool) {
    return { type: types.DELETE_TOOL_SUCCESS, payload: tool };
  },


  // Get tool
  loadTool: function(id) {
    return function(dispatch) {
      return ToolApi
        .getOneTool(id)
        .then(tool => {
          dispatch(actionsFunction.loadToolSuccess(tool));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadToolSuccess: function(tool) {
    return { type: types.GET_TOOL_SUCCESS, payload: tool };
  },

  // Load  list
  loadToolList: function() {
    return function(dispatch) {
      return ToolApi
        .getToolList()
        .then(list => {
          dispatch(actionsFunction.loadToolListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadToolListSuccess: function(list) {
    return { type: types.LIST_TOOL_SUCCESS, payload: list };
  },

	
  // Save tool
  saveTool: function(tool) {
    return function(dispatch) {
      return ToolApi
        .saveTool(tool)
        .then(tool => {
          dispatch(actionsFunction.saveToolSuccess(tool));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveToolSuccess: function(tool) {
    return { type: types.UPDATE_TOOL_SUCCESS, payload: tool };
  },


};

export default actionsFunction;
